# -*- coding: utf-8 -*-
"""re1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1of2XcNl4jiUfqBXua_PIrKxJkh8vU9My
"""



from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, classification_report
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer
import string

nltk.download('stopwords')
nltk.download('wordnet')

data = pd.read_csv('/content/drive/MyDrive/project-re/project (2).csv')

def preprocess_text(text):
    # Remove punctuation
    text = text.translate(str.maketrans('', '', string.punctuation))
    # Convert text to lowercase
    text = text.lower()
    # Tokenization
    tokens = text.split()
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    tokens = [word for word in tokens if word not in stop_words]
    # Lemmatization
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(word) for word in tokens]
    return ' '.join(tokens)

data['clean_text'] = data['Review'].apply(preprocess_text)

X_train, X_test, y_train, y_test = train_test_split(data['clean_text'], data['Sentiment'], test_size=0.2, random_state=42)

vectorizer = TfidfVectorizer(max_features=1000)  # You can adjust max_features as needed
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

model = LogisticRegression()

model.fit(X_train_tfidf, y_train)

y_pred = model.predict(X_test_tfidf)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Importing necessary libraries
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.datasets import make_classification
from sklearn.metrics import accuracy_score

# Generating synthetic dataset
X, y = make_classification(n_samples=1000, n_features=6, n_classes=2, random_state=42)

# Splitting the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Creating and training a logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Making predictions on the training and testing sets

train_pred = model.predict(X_train)
test_pred = model.predict(X_test)

# Calculating accuracy scores
train_accuracy = accuracy_score(y_train, train_pred)
test_accuracy = accuracy_score(y_test, test_pred)

# Printing the accuracy scores
print("Training Accuracy:", train_accuracy)
print("Testing Accuracy:", test_accuracy)

import matplotlib.pyplot as plt

# Plotting the training and testing accuracies
plt.plot(["Training", "Testing"], [train_accuracy, test_accuracy], marker='o', linestyle='-')
plt.title("Training vs Testing Accuracy")
plt.xlabel("Dataset")
plt.ylabel("Accuracy")
plt.ylim(0, 1)  # Set y-axis limit to 0-1 for accuracy
plt.grid(True)
plt.show()

